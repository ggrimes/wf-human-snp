//
// Notes to End Users.
//
// The workflow should run without editing this configuration file,
// however there may be instances in which you wish to edit this
// file for compute performance or other reasons. Please see:
//
//   https://nextflow.io/docs/latest/config.html#configuration
//
// for further help editing this file.

env {
  MALLOC_ARENA_MAX=1
}

params {
    help = false
    wfversion = "v0.2.1"
    aws_image_prefix = null
    aws_queue = null

    help = false
    bam = null
    ref = null
    bed = null
    out_dir = "output"
    disable_ping = false
    model = "${projectDir}/data/ont_r104_e81_sup_g5015"
    report_name = "report"
    // workflow options
    call_retries = 5
    phase_vcf = false
    parallel_phase = false
    phase_chunk = 25000000  // 25Mb
    phase_chunk_min = 10000000  // 10Mb
    use_longphase = false
    use_longphase_intermediate = false
    // clair3 parameters 
    sample_name = "SAMPLE"
    ctg_name = "EMPTY"
    include_all_ctgs = "False"
    ref_pct_full = 0.1
    var_pct_full = 0.7
    GVCF = "False"
    snp_min_af = 0.0
    indel_min_af = 0.0
    vcf_fn = "EMPTY"
    // used in hap.py evaluation 
    truth_vcf = ""
    truth_bed = ""

    // nf-core params
    monochrome_logs = false
    validate_params = true
    show_hidden_params = false
    schema_ignore_params = 'show_hidden_params,validate_params,monochrome_logs,aws_queue,aws_image_prefix,wfversion'
}


manifest {
    name            = 'epi2me-labs/wf-human-snp'
    author          = 'Oxford Nanopore Technologies'
    homePage        = 'https://github.com/epi2me-labs/wf-human-snp'
    description     = 'Diploid variant calling using Clair3.'
    mainScript      = 'main.nf'
    nextflowVersion = '>=20.10.0'
    //version       = 'v0.0.7'  // TODO: do switch to this?
}



executor {
  cpus = 4
  memory = 24.GB
  name = "sge"
  queueSize = "100"
}


// note some profile overrides this
process {

  scratch = true
  clusterOptions = { task.memory ? "-l h_vmem=${task.memory.bytes/task.cpus}" : null }
  penv = { task.cpus > 1 ? "sharedmem" : null }
  
  withLabel:clair3 {
        container = "/exports/igmm/eddie/HGS-OvarianCancerA-SGP-WGS/ONT/containers/wf-human-snp.sif"
        clusterOptions = {"-l h_vmem=${(task.memory + 4.GB).bytes/task.cpus}"}
    }
    withLabel:happy {
        container = "/exports/igmm/eddie/HGS-OvarianCancerA-SGP-WGS/ONT/containers/hap.py.sif"
    }

  // common SGE error statuses
  errorStrategy = {task.exitStatus in [143,137,104,134,139,140] ? 'retry' : 'finish'}
  maxErrors = '-1'
  maxRetries = 3

  beforeScript =
  """
  . /etc/profile.d/modules.sh
  module load 'anaconda/5.3.1'
  module load 'roslin/singularity/3.5.3'
  export SINGULARITY_TMPDIR="\$TMPDIR"
  """

  shell = ['/bin/bash', '-euo', 'pipefail']
}


profiles {
    // the "standard" profile is used implicitely by nextflow
    // if no other profile is given on the CLI
    standard {
        docker {
            enabled = true
            // this ensures container is run as host user and group, but
            //    also adds host user to the within-container group
            runOptions = "--user \$(id -u):\$(id -g) --group-add 100"
        }
    }

    // using singularity instead of docker
    singularity {
        singularity {
            enabled = true
            autoMounts = true
            envWhitelist = "SINGULARITY_TMPDIR,TMPDIR"
            runOptions = '-p -B "$TMPDIR"'
        }
    }

    // using conda environments
    conda {
        docker.enabled = false
        conda {
             cacheDir = ""
             useMamba = true
        }
        process {
            withLabel:clair3 {
                conda = "/gpfs/igmmfs01/eddie/HGS-OvarianCancerA-SGP-WGS/ONT/envs/epi2melabs-nf-human-snp"
            }
            shell = ['/bin/bash', '-euo', 'pipefail']
        }
    }

    // using AWS batch, this requires additional parameters for image locations
    awsbatch {
        process {
            executor = 'awsbatch'
            queue = "${params.aws_queue}"
            memory = '8G'
            withLabel:clair3 {
                container = "${params.aws_image_prefix}-wf-human-snp:${params.wfversion}"
            }
            shell = ['/bin/bash', '-euo', 'pipefail']
        }
    }
}


timeline {
  enabled = true
  file = "${params.out_dir}/execution/timeline.html"
}
report {
  enabled = true
  file = "${params.out_dir}/execution/report.html"
}
trace {
  enabled = true
  file = "${params.out_dir}/execution/trace.txt"
}
dag {
  enabled = true
  file = "${params.out_dir}/execution/pipeline.svg"
}
